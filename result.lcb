/**
The result library provides an arithmetic type for representing and
operating on the result of an operation that might reasonably be
expected to fail at runtime for in a way that does not represent a
programming error.  For example, when fetching the contents of a file,
reading may fail for any number of reasons, such as if the file does
not exist or you do not have permission to read it.

A U_Result is an opaque type with two states: "ok", in which case it
contains a value that can be obtained with U_Unwrap(), or "error", in
which case it contains error information that can be obtained with
U_GetError().

You can chain result-based operations together with U_ResultMap().
*/
module _.result0

use _.format0

--==============================================================
-- PUBLIC
--==============================================================

----------------------------------------------------------------
-- Types
----------------------------------------------------------------

public type U_Result is Array

public handler type U_ResultMapFunc(in pResult as U_Result, \
		inout xContext as optional any) returns U_Result

----------------------------------------------------------------
-- Handlers
----------------------------------------------------------------

public handler U_MakeResult(in pValue as optional any)
	return { "__OK": pValue }
end handler

public handler U_MakeError(in pErrorInfo as any)
	return { "__ERROR": pErrorInfo }
end handler

public handler U_IsOk(in pResult as U_Result) returns Boolean
	if "__OK" is among the keys of pResult then
		return true
	else if "__ERROR" is among the keys of pResult then
		return false
	else
		throw "Parameter is not a U_Result"
	end if
end handler

public handler U_IsError(in pResult as U_Result) returns Boolean
	return not U_IsOk(pResult)
end handler

public handler U_Unwrap(in pResult as U_Result) returns optional any
	if "__OK" is among the keys of pResult then
		return pResult["__OK"]
	else if "__ERROR" is among the keys of pResult then
		throw U_Format("Unhandled error info: {}", \
				[pResult["__ERROR"]])
	else
		throw "Parameter is not a U_Result"
	end if
end handler

public handler U_Expect(in pResult as U_Result, in pMessage as String) \
		returns optional any
	if U_IsError(pResult) then
		throw pMessage
	else
		return U_Unwrap(pResult)
	end if
end handler

public handler U_GetError(in pResult as U_Result) returns any
	if "__ERROR" is among the keys of pResult then
		return pResult["__ERROR"]
	else if "__OK" is among the keys of pResult then
		throw "Successful result has no error info"
	else
		throw "Parameter is not a U_Result"
	end if
end handler

public handler U_IsResult(in pValue) returns Boolean
	if not (pValue is an array) then
		return false
	else if "__OK" is among the keys of pValue or \
			"__ERROR" is among the keys of pValue then
		return true
	else
		return false
	end if
end handler

public handler U_ResultMap(in pResult as U_Result, \
		in pMapFunc as U_ResultMapFunc, \
		inout xContext as optional any) returns U_Result

	if not U_IsOk(pResult) then
		return pResult
	end if

	variable tResult as U_Result
	put pMapFunc(pResult, xContext) into tResult

	if not U_IsResult(tResult) then
		throw "Map function did not return a U_Result"
	end if

	return tResult
end handler

end module