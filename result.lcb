/**
The result library provides an arithmetic type for representing and
operating on the result of an operation that might reasonably be
expected to fail at runtime for in a way that does not represent a
programming error.  For example, when fetching the contents of a file,
reading may fail for any number of reasons, such as if the file does
not exist or you do not have permission to read it.

A UResult is an opaque type with two states: "ok", in which case it
contains a value that can be obtained with u_unwrap(), or "error", in
which case it contains error information that can be obtained with
u_get_error().

You can chain result-based operations together with u_result_map().
*/
module _.result0

use _.format0

--==============================================================
-- PUBLIC
--==============================================================

----------------------------------------------------------------
-- Types
----------------------------------------------------------------

public type UResult is Array

public handler type UResultMapFunc(in pResult as UResult, \
		inout xContext as optional any) returns UResult

----------------------------------------------------------------
-- Handlers
----------------------------------------------------------------

public handler u_make_result(in pValue as optional any)
	return { "__OK": pValue }
end handler

public handler u_make_error(in pErrorInfo as any)
	return { "__ERROR": pErrorInfo }
end handler

public handler u_is_ok(in pResult as UResult) returns Boolean
	if u_is_result(pResult) then
		return "__OK" is among the keys of pResult
	else
		throw "Parameter is not a UResult"
	end if
end handler

public handler u_is_error(in pResult as UResult) returns Boolean
	return not u_is_ok(pResult)
end handler

public handler u_unwrap(in pResult as UResult) returns optional any
	if u_is_ok(pResult) then
		return pResult["__OK"]
	else
		throw u_format("Unhandled error info: {}", \
				[pResult["__ERROR"]])
	end if
end handler

public handler u_expect(in pResult as UResult, in pMessage as String) \
		returns optional any
	if u_is_error(pResult) then
		throw pMessage
	else
		return u_unwrap(pResult)
	end if
end handler

public handler u_get_error(in pResult as UResult) returns any
	if u_is_error(pResult) then
		return pResult["__ERROR"]
	else
		throw "Successful result has no error info"
	end if
end handler

public handler u_is_result(in pValue) returns Boolean
	if not (pValue is an array) then
		return false
	else if "__OK" is among the keys of pValue or \
			"__ERROR" is among the keys of pValue then
		return true
	else
		return false
	end if
end handler

public handler u_result_map(in pResult as UResult, \
		in pMapFunc as UResultMapFunc, \
		inout xContext as optional any) returns UResult

	if u_is_error(pResult) then
		return pResult
	end if

	variable tResult as UResult
	put pMapFunc(pResult, xContext) into tResult

	if not u_is_result(tResult) then
		throw "Map function did not return a UResult"
	end if

	return tResult
end handler

end module
