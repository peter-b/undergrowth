module _.tests.result

use _.result0
use com.livecode.__INTERNAL._testlib

handler TestOk_GetError()
	return u_get_error(u_make_result(true))
end handler

public handler TestOk()
	variable tValue as List
	put ["a", "b"] into tValue

	variable tResult as UResult
	put u_make_result(tValue) into tResult

	test "result ok (ok)" when u_is_ok(tResult)
	test "result not error (ok)" when not u_is_error(tResult)

	test "result unwrap (ok)" when u_unwrap(tResult) is tValue
	test "result expect (ok)" when u_expect(tResult, "whoops") is tValue

	MCUnitTestHandlerThrows(TestOk_GetError, "result get error (ok)")
end handler

handler TestError_Unwrap()
	return u_unwrap(u_make_error("stuff"))
end handler

handler TestError_Expect()
	return u_expect(u_make_error("stuff"), "whoops")
end handler

public handler TestError()
	variable tResult as UResult
	put u_make_error("stuff") into tResult

	test "result ok (err)" when not u_is_ok(tResult)
	test "result not error (err)" when u_is_error(tResult)

	MCUnitTestHandlerThrows(TestError_Unwrap, "result unwrap (err)")
	MCUnitTestHandlerThrows(TestError_Expect, "result expect (err)")

	test "result get error (err)" when u_get_error(tResult) is "stuff"
end handler

handler TestMap_Add(in pResult as UResult, \
		inout pAddition as optional any) returns UResult
	return u_make_result(pAddition + u_unwrap(pResult))
end handler

public handler TestMap()
	variable tResult as UResult
	variable tContext as Number
	put 5 into tContext

	put u_make_result(3) into tResult
	put u_result_map(tResult, TestMap_Add, tContext) into tResult
	test "map unwrap (ok)" when u_unwrap(tResult) is 8

	put u_make_error("whoops") into tResult
	put u_result_map(tResult, TestMap_Add, tContext) into tResult
	test "map get error (err)" when u_get_error(tResult) is "whoops"
end handler

end module
