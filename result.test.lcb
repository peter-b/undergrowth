module _.tests.result

use _.result0
use com.livecode.__INTERNAL._testlib

handler TestOk_GetError()
	return U_GetError(U_MakeResult(true))
end handler

public handler TestOk()
	variable tValue as List
	put ["a", "b"] into tValue

	variable tResult as U_Result
	put U_MakeResult(tValue) into tResult

	test "result ok (ok)" when U_IsOk(tResult)
	test "result not error (ok)" when not U_IsError(tResult)

	test "result unwrap (ok)" when U_Unwrap(tResult) is tValue
	test "result expect (ok)" when U_Expect(tResult, "whoops") is tValue

	MCUnitTestHandlerThrows(TestOk_GetError, "result get error (ok)")
end handler

handler TestError_Unwrap()
	return U_Unwrap(U_MakeError("stuff"))
end handler

handler TestError_Expect()
	return U_Expect(U_MakeError("stuff"), "whoops")
end handler

public handler TestError()
	variable tResult as U_Result
	put U_MakeError("stuff") into tResult

	test "result ok (err)" when not U_IsOk(tResult)
	test "result not error (err)" when U_IsError(tResult)

	MCUnitTestHandlerThrows(TestError_Unwrap, "result unwrap (err)")
	MCUnitTestHandlerThrows(TestError_Expect, "result expect (err)")

	test "result get error (err)" when U_GetError(tResult) is "stuff"
end handler

handler TestMap_Add(in pResult as U_Result, \
		inout pAddition as optional any) returns U_Result
	return U_MakeResult(pAddition + U_Unwrap(pResult))
end handler

public handler TestMap()
	variable tResult as U_Result
	variable tContext as Number
	put 5 into tContext

	put U_MakeResult(3) into tResult
	put U_ResultMap(tResult, TestMap_Add, tContext) into tResult
	test "map unwrap (ok)" when U_Unwrap(tResult) is 8

	put U_MakeError("whoops") into tResult
	put U_ResultMap(tResult, TestMap_Add, tContext) into tResult
	test "map get error (err)" when U_GetError(tResult) is "whoops"
end handler

end module
