-- FIXME log level constants should be available in the
-- public API.

module _.log0

use com.livecode.foreign
use _._util

--==============================================================
-- PUBLIC
--==============================================================

----------------------------------------------------------------
-- Types
----------------------------------------------------------------

public handler type U_LogHandlerT(in pMessage as String, \
		in pLevel as Number) returns nothing

----------------------------------------------------------------
-- Handlers
----------------------------------------------------------------

public handler U_Debug(in pMessage as String) returns nothing
	Log(pMessage, kLogDebug)
end handler

public handler U_Info(in pMessage as String) returns nothing
	Log(pMessage, kLogInfo)
end handler

public handler U_Warning(in pMessage as String) returns nothing
	Log(pMessage, kLogWarning)
end handler

public handler U_Error(in pMessage as String) returns nothing
	Log(pMessage, kLogError)

	-- Errors are fatal
	quit with status 42
end handler

-- The default handler used for outputting log messages
public handler U_DefaultLogHandler(in pMessage as String, \
		in pLevel as Number) returns nothing
	variable tLines as List
	split pMessage by "\n" into tLines

	if the operating system is in ["linux","mac"] and StderrIsTty() then
		LogColour(tLines, pLevel)
	else
		LogDefault(tLines, pLevel)
	end if
end handler

-- Set the default log handler, returning the previous default log
-- handler
public handler U_SetDefaultLogHandler(in pHandler as U_LogHandlerT) \
		returns U_LogHandlerT
	variable tOldHandler as optional U_LogHandlerT
	put sDefaultHandler into tOldHandler
	put pHandler into sDefaultHandler
	if tOldHandler is nothing then
		return U_DefaultLogHandler
	else
		return tOldHandler
	end if
end handler

--==============================================================
-- PRIVATE
--==============================================================

----------------------------------------------------------------
-- Variables
----------------------------------------------------------------

variable sDefaultHandler as optional U_LogHandlerT

----------------------------------------------------------------
-- Handlers
----------------------------------------------------------------

-- Main entry point for logging
private handler Log(in pMessage as String, in pLevel as Number) returns nothing
	if sDefaultHandler is nothing then
		U_DefaultLogHandler(pMessage, pLevel)
	else
		sDefaultHandler(pMessage, pLevel)
	end if
end handler

----------------------------------------------------------------
-- Utility functions
----------------------------------------------------------------

private handler MessageLines(in pMessage as String) returns List
	-- Split the message by the newline character
	variable tLines as List
	split pMessage by "\n" into tLines

	-- Remove all empty lines
	variable tIndex as Number
	put 1 into tIndex
	repeat while tIndex <= the number of elements in tLines
		if tLines[tIndex] is empty then
			delete element tIndex of tLines
		else
			add 1 to tIndex
		end if
	end repeat

	return tLines
end handler

----------------------------------------------------------------
-- Colour logging
----------------------------------------------------------------

-- ANSI colour escape codes
constant kColorError   is "\u{1B}[1;31m" -- bold red
constant kColorWarning is "\u{1B}[33m" -- yellow
constant kColorInfo    is "\u{1B}[0m"  -- reset
constant kColorDebug   is "\u{1B}[36m" -- cyan
constant kColorReset   is "\u{1B}[0m"  -- reset

private foreign handler _isatty(in pFd as CInt) returns CInt \
	binds to "isatty"

-- Checks whether file descriptor 2 -- usually stderr -- is a TTY.
private handler StderrIsTty() returns Boolean
	variable tIsTty as Boolean
	unsafe
		put _isatty(2) > 0 into tIsTty
	end unsafe
	return tIsTty
end handler

-- Print each log line in colour corresponding to the severity level,
-- using ANSI escape codes
private handler LogColour(in pLines as List, in pLevel as Number) \
		returns nothing

	variable tCode as String
	if pLevel is kLogError then
		put kColorError into tCode
	else if pLevel is kLogWarning then
		put kColorWarning into tCode
	else if pLevel is kLogInfo then
		put kColorInfo into tCode
	else if pLevel is kLogDebug then
		put kColorDebug into tCode
	end if

	variable tLine as String
	repeat for each element tLine in pLines
		write __U_EncodeUTF8(tCode & tLine & kColorReset & "\n") \
			to the error stream
	end repeat
end handler

----------------------------------------------------------------
-- Text only logging (for journal)
----------------------------------------------------------------

-- UNIX syslog(3) priority levels
constant kLogError   is 3
constant kLogWarning is 4
constant kLogInfo    is 6
constant kLogDebug   is 7

-- Print each log message line with a prefix such as <4>, where the
-- number corresponds to the syslog level.  It's interpreted by
-- systemd-journald in order to properly categorise log messages.
private handler LogDefault(in pLines as List, in pLevel as Number) \
		returns nothing

	-- Prefix each line with a priority tag
	variable tTag as String
	put "<" & __U_FormatInt(pLevel) &  ">" into tTag

	variable tLine as String
	repeat for each element tLine in pLines
		write __U_EncodeUTF8(tTag & tLine & "\n") to the error stream
	end repeat
end handler

end module
